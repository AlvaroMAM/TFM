abstract sig Aggregator extends ClassicalService {}
</
    formula mslogicalperformancefactor;
    formula msram;
    formula msbandwidth;
    formula msexecutiontime;
    formula msavailability;
    formula shots;
    var finished : bool init false;
    [machines:cpair] (finished=false) -> (finished'=true);

    // Sumar solo las propiedades cuando se ejecuta
    reward performanceRew [machines:cpair] true : ((machines.cpulogicalperformancefactor/mslogicalperformancefactor)+(machines.cpuram/msram)+(machines.cpubandwidth/msbandwidth)/3);
    reward costRew [machines:cpair] true : machines.cpucostfactor*msavailability;
/>

abstract sig Sensor extends ClassicalService {}
</
    formula mslogicalperformancefactor;
    formula msram;
    formula msbandwidth;
    formula msexecutiontime;
    formula msavailability;
    formula shots;
    var finished : bool init false;
    [machines:cpair] (finished=false) -> (finished'=true);

    // Sumar solo las propiedades cuando se ejecuta
    reward performanceRew [machines:cpair] true : ((machines.cpulogicalperformancefactor/mslogicalperformancefactor)+(machines.cpuram/msram)+(machines.cpubandwidth/msbandwidth)/3);
    reward costRew [machines:cpair] true : machines.cpucostfactor*msavailability;
/>

abstract sig Groveralg extends ClassicalService {}
</
    formula mslogicalperformancefactor;
    formula msram;
    formula msbandwidth;
    formula msexecutiontime;
    formula msavailability;
    formula shots;
    var finished : bool init false;
    [machines:cpair] (finished=false) -> (finished'=true);

    // Sumar solo las propiedades cuando se ejecuta
    reward performanceRew [machines:cpair] true : ((machines.cpulogicalperformancefactor/mslogicalperformancefactor)+(machines.cpuram/msram)+(machines.cpubandwidth/msbandwidth)/3);
    reward costRew [machines:cpair] true : machines.cpucostfactor*msavailability;
/>

abstract sig Binarysearch extends ClassicalService {}
</
    formula mslogicalperformancefactor;
    formula msram;
    formula msbandwidth;
    formula msexecutiontime;
    formula msavailability;
    formula shots;
    var finished : bool init false;
    [machines:cpair] (finished=false) -> (finished'=true);

    // Sumar solo las propiedades cuando se ejecuta
    reward performanceRew [machines:cpair] true : ((machines.cpulogicalperformancefactor/mslogicalperformancefactor)+(machines.cpuram/msram)+(machines.cpubandwidth/msbandwidth)/3);
    reward costRew [machines:cpair] true : machines.cpucostfactor*msavailability;
/>

abstract sig QuantumGroveralg extends QuantumService{}
</
    formula mslogicalperformancefactor;
    formula msram;
    formula msbandwidth;
    formula msexecutiontime;
    formula msavailability;
    formula shots;
    var finished : bool init false;
    [machines:qpair] (finished=false) -> (finished'=true);

    // Sumar solo las propiedades cuando se ejecuta
    reward performanceRew [machines:qpair] true : 0;
    reward costRew [machines:qpair] true : machines.qpuprize*shots;
/>

abstract sig Resultprocessing extends ClassicalService {}
</
    formula mslogicalperformancefactor;
    formula msram;
    formula msbandwidth;
    formula msexecutiontime;
    formula msavailability;
    formula shots;
    var finished : bool init false;
    [machines:cpair] (finished=false) -> (finished'=true);

    // Sumar solo las propiedades cuando se ejecuta
    reward performanceRew [machines:cpair] true : ((machines.cpulogicalperformancefactor/mslogicalperformancefactor)+(machines.cpuram/msram)+(machines.cpubandwidth/msbandwidth)/3);
    reward costRew [machines:cpair] true : machines.cpucostfactor*msavailability;
/>