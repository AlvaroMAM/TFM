// ----------------------------------------------------------------------------
// Alumno: Álvaro Manuel Aparicio Morales
// Tutores: Javier Cámara y Jose Garcia-Alonso
// Máster Universitario en Ingeniería Informátcia
// Universidad de Málaga
// Descripcion:
// Behavioral and Architectural Model of Hybrid Application
// ----------------------------------------------------------------------------

ModelType: dtmc;

// Las máquinas deben de estar relacionadas con servicios 
abstract sig PU {services : some Service}
abstract sig QPU extends PU {}
abstract sig CPU extends PU {}

// Signaturas dependientes del Caso de Estudio
/* Defintion of QPU Machines */
/*
one sig Aquila extends QPU {}
one sig Aria_1 extends QPU {}
one sig Aria_2 extends QPU {}
one sig Aspen_m_3 extends QPU {}
one sig Forte_1 extends QPU {}
one sig Harmony extends QPU {}
one sig Lucy extends QPU {}
*/
//sig Dm1 extends QPU {}
//sig Sv1 extends QPU {}
sig Tn1 extends QPU {}
</
    formula machineCost; // Tengo que completar por cada QPU que vaya a usar
    formula machinePerformance;
    [services:qpair] true -> true;    
/>
sig Local extends QPU {}
</
    formula machineCost; // Tengo que completar por cada QPU que vaya a usar
    formula machinePerformance;
    [services:qpair] true -> true;    
/>

/* Definition of CPU Machines */
/*
lone abstract sig T2_nano extends CPU {}
lone abstract sig T2_micro extends CPU {}
lone abstract sig T2_small extends CPU {}
lone abstract sig T2_medium extends CPU {}
lone abstract sig T2_large extends CPU {}
lone abstract sig T2_xlarge extends CPU {}
lone abstract sig T2_2xlarge extends CPU {}
lone abstract sig T3_nano extends CPU {}
lone abstract sig T3_micro extends CPU {}
lone abstract sig T3_small extends CPU {}
*/
//lone abstract sig T3_medium extends CPU {}
//lone abstract sig T3_large extends CPU {}
sig T3_xlarge extends CPU {}
</
    formula machineCost; // Tengo que completar por cada QPU que vaya a usar
    formula machinePerformance;
    [services:cpair] true -> true; // cpair --> For classical pair   
/>
sig T3_2xlarge extends CPU {}
</
    formula machineCost; // Tengo que completar por cada QPU que vaya a usar
    formula machinePerformance;
    [services:cpair] true -> true;  // Para todos los servicios que tengo conectado  
/>

/* Definition of Services */
abstract sig Service {
	machines : some PU,
	deployment : one Deployment,
	hybrid_service: set Service, // Simular el concepto de hybrid_service
//	link: some Service // Comunicación entre servicios del caso de uso
}
</
    formula performance;
    formula cost;
/>
abstract sig Classical_Service extends Service {}
abstract sig Quantum_Service extends Service {}
/*Definition of Deployment*/
abstract sig Deployment {services: some Service}
abstract sig Hybrid_Deployment extends Deployment {}
one sig UseCase extends Hybrid_Deployment {}
</
    enum status_analysis:{none, initial, launchAnalysis, waitingResults,done};
    var current_status:[status_analysis] init none;
    var AggregatorServiceInvoked : bool init false;
    var machineCost:[0..500] init 0;
    var workflowDone: bool init false;
    [launch] (current_status=initial) -> (current_status'=launchAnalysis);
    // 1. Launching Analysis
    [Aggregator:activationCall] (current_status=launchAnalysis) & (!AggregatorServiceInvoked) -> (AggregatorServiceInvoked'=true) & (current_status'=waitingResults); // Se sincroniza con aggregator
    [ResultProcessor:showQuantumResults] (current_status=waitingResults) & (AggregatorServiceInvoked) -> (current_status'=done) & (workflowDone'=true);
/>

//abstract sig Classical_Deployment extends Deployment {}
// por definir

abstract sig Aggregator signature extends ClassicalService {}
</
    formula performance;
    formula cost;
    enum status_aggregator:{initial, dataCollection, transformingData, groverCall, launchGrover, done, none};
    var serviceOK: bool init false;
    var ready : bool init true;
    var DataServiceInvoked : bool init false;
    var GroverClassicalServiceInvoked : bool init false;
    var current_status:[status_aggregator] init none;

    //Calcular coste y rendimiento según la máquina con la que esté relacionada
    [machines:cpair] (current_status=none) -> (cost'=machines.machineCost*cost) & (performance'=machines.machinePerformance*performance) & (current_status'=initial);
    [DeploymentWorkFlow:activationCall] (ready) -> (serviceOK'=true) & (ready'=false);
    [DataService:requestDataCall] (!ready) & (serviceOK) & (!DataService1Invoked) & (current_status=init) -> (DataServiceInvoked'=true) & (current_status'=dataCollection);
    [DataService:requestData] (!ready) & (serviceOK) & (DataServiceInvoked) & (current_status=dataCollection) -> (current_status'=transformingData);
    // ¿La llamada a si mismo para transformar la información se haría así?
    [] (DataServiceInvoked) & (current_status=transformingData) -> (current_status'=groverCall);
    [ClassicalGrover:launchGroverCall] (current_status=groverCall) & (!GroverClassicalServiceInvoked)-> (current_status'=launchGrover) & (GroverClassicalServiceInvoked='true);
    [ClassicalGrover:launchGrover] (GroverClassicalServiceInvoked) & (current_status=launchGrover) -> (current_status'=done) & (ready'=false) & (serviceOK'=false); // Aquí terminaria

    // Sumar solo las propiedades cuando se ejecuta
    reward performanceRew [ClassicalGrover:launchGrover] true : performance;
    reward costRew [ClassicalGrover:launchGrover] true : cost;
/>

abstract sig DataService extends ClassicalService{}
</
    enum status_dataservice:{initial, dataCollection, transformingData, groverCall, launchGrover, done, none};
    formula performance;
    formula cost;
    var serviceOK: bool init false;
    var ready : bool init true;
    var current_status:[status_dataservice] init none;
    [machines:cpair] (current_status=none) -> (cost'=machines.machineCost*cost) & (performance'=machines.machinePerformance*performance) & (current_status'=initial);
    [Aggregator:requestDataCall] (ready) -> (serviceOK'=true) & (ready'=false); // Creo que esta linea no es necesaria en este caso de estudio porque no se está teniendo en cuenta el éxito en las llamadas
    [Aggregator:requestData] (!ready) & (serviceOK) -> (ready='true) & (serviceOK='false);

    // Sumar solo las propiedades cuando se ejecuta
    reward performanceRew [Aggregator:requestData] true : performance;
    reward costRew [Aggregator:requestData] true : cost; 
/>

abstract sig ClassicalGrover extends ClassicalService {}
</ // Debe tener transiciones síncronas con quantum grover y processing_result services
    formula performance;
    formula cost;
    var serviceOK: bool init false;
    var ready : bool init true;
    enum status_classical_grover:{initial, circuitBuilding, groverLaunch, resultRecovery, launchProcessingResult, done, none};
    var current_status:[status_classical_grover] init none;
    var GroverQuantumServiceInvoked : bool init false;
    var ResultProcessingServiceInvoked : bool init false;

    [machines:cpair] (current_status=none) -> (cost'=machines.machineCost*cost) & (performance'=machines.machinePerformance*performance) & (current_status'=initial);
    [Aggregator:launchGroverCall] (ready) -> (serviceOK'=true) & (ready'=false);
    [Aggregator:launchGrover] (!ready) & (serviceOK) -> (current_status='circuitBuilding);
    [] (!ready) & (serviceOK) & (current_status=circuitBuilding) -> (current_status='groverLaunch);
    [QuantumGrover:launchGroverCall] (!ready) & (serviceOK) & (current_status=groverLaunch) & (!GroverQuantumServiceInvoked) -> (GroverQuantumServiceInvoked'=true);
    [QuantumGrover:launchGrover] (!ready) & (serviceOK) & (current_status=groverLaunch) & (GroverQuantumServiceInvoked) -> (current_status='resultRecovery);
    [QuantumGrover:results] (!ready) & (serviceOK) & (GroverQuantumServiceInvoked) & (current_status=resultRecovery) -> (current_status='launchProcessingResult);
    [ResultProcessor:resultsRecievedCall] (!ready) & (serviceOK) & (GroverQuantumServiceInvoked) & (current_status=resultRecovery) & (!ResultProcessingServiceInvoked)-> (ResultProcessingServiceInvoked'=true);
    [ResultProcessor:resultsRecieved] (!ready) & (serviceOK) & (GroverQuantumServiceInvoked) & (current_status=launchProcessingResult) & (ResultProcessingServiceInvoked) -> (current_status='done) & (ready'=true) & (serviceOK'=false); // Termina el proceso Clásico de grover

    // Sumar solo las propiedades cuando se ejecuta
    reward performanceRew [ResultProcessor:resultsRecieved] true : performance;
    reward costRew [ResultProcessor:resultsRecieved] true : cost; 
/>

one sig QuantumGrover extends QuantumService{}
</
    formula cost;
    enum status_quantum_grover:{initial, enqueue, executing, done, none};
    var serviceOK: bool init false;
    var ready : bool init true;
    var current_status:[status_quantum_grover] init none;
    [machines:qpair] (current_status=none) -> (cost'=machines.machineCost*cost) & (current_status'=initial);
    [ClassicalGrover:launchGroverCall] (current_status=initial) & (ready) -> (serviceOK'=true) & (ready'=false);
    [ClassicalGrover:launchGrover] (current_status=initial) & (!ready) & (serviceOK) -> (current_status'=enqueue);
    [] (current_status=enqueue) & (!ready) & (serviceOK) -> 0.5: (current_status'=enqueue) + 0.5 (current_status'=executing); // Simulating A Queue with probabilistic execution
    [] (current_status=executing) & (!ready) & (serviceOK) -> (current_status'=done); // Simulating A Queue with probabilistic execution
    [ClassicalGrover:results] (current_status'=done) & (!ready) & (serviceOK) -> (ready'=true) & (serviceOK'=false);

    // Sumar solo las propiedades cuando se ejecuta
    reward performanceRew [ClassicalGrover:results] true : performance;
    reward costRew [ClassicalGrover:results] true : cost;
/>


abstract sig ResultProcessor extends ClassicalService {}
</
    formula performance;
    formula cost;
    enum status_processor:{init, recievingResult, processingResult, resultsReady, done, none};
    var serviceOK: bool init false;
    var ready : bool init true;
    var current_status:[status_processor] init none;
    [machines:cpair] (current_status=none) -> (cost'=machines.machineCost*cost) & (performance'=machines.machinePerformance*performance) & (current_status'=initial);
    [ClassicalGrover:resultsRecievedCall] (ready) -> (serviceOK'=true) & (ready'=false); 
    [ClassicalGrover:resultsRecieved] (!ready) & (serviceOK) -> (current_status'=recievingResult);
    [] (!ready) & (serviceOK) & (current_status=recievingResult) ->  (current_status'=processingResult);
    [] (!ready) & (serviceOK) & (current_status=processingResult) ->  (current_status'=resultsReady);
    [DeploymentWorkFlow:showQuantumResults] (current_status=resultReady) & (!ready) & (serviceOK) -> (current_status'=done) & (ready'=true) & (serviceOK'=false);

    // Sumar solo las propiedades cuando se ejecuta
    reward performanceRew [DeploymentWorkFlow:showQuantumResults] true : performance;
    reward costRew [DeploymentWorkFlow:showQuantumResults] true : cost;

/>

fact {
/*-------------------------------------------- Architectural-Restrictions ------------------------------------------------------*/

/*-------------------------------------------- Machines- Restrictions------------------------------------------------------*/
// Toda máquina debe estar asociada a algún servicio
all pu: PU | #pu.services > 0
// Si un servicio está desplegado en una máquina, entonces esa máquina solo puede estar relacionada con ese servicio
all pu: PU, s: Service | s in pu.services implies s.machines = pu
// Para todas las máquinas clásicas, su conjunto de servicios no pueden ser cuánticos
all c: CPU | #(c.services & Quantum_Service) = 0
// Todos los servicios deben de estar asociados a un despliege
// Para todas las máquinas clásicas, su conjunto de servicios no pueden ser cuánticos
all q: QPU | #(q.services & Classical_Service) = 0
/*-------------------------------------------------------------------------------------------------------------------------*/

/*-------------------------------------------- Services- Restrictions------------------------------------------------------*/
//all s: Service | #(s.deployment) = 1 // Ya se cumple
all s: Service | #(s.deployment & Hybrid_Deployment) = 0 implies #(s.hybrid_service) = 0
// Todo servicio tiene que estar asociado a un despliegue. Aquí se define para ambos lados, desde servicios y desde despliegue
all s: Service, d: Deployment | (s in d.services implies d in s.deployment) and (s.deployment = d implies s in d.services)
/*-------------------------------------------------------------------------------------------------------------------------*/

/*------------------------------------------- Classical-Restrictions-------------------------------------------------- */
// Un servicio clásico, no puede relacionarse con una máquina cuántica
all cs: Classical_Service | #(cs.machines & QPU) = 0
// Un servicio clásico, no puede estar alojado en una misma instancia de máquina clásica que otro servicio clásico (No co-alojados)
all cs1, cs2 : Classical_Service | cs1 != cs2 implies #(cs1.machines & cs2.machines) = 0
// Un servicio clásico, no puede estar alojado en la misma instancia de máquina clásica que un servicio híbrido (Se cumple con la anterior)
// Un servicio clásico, no puede estar relacionado con más de una instancia de máquina clásica.
all sc: Classical_Service | #sc.machines < 2
// Un servicio clásico, tiene que tener una instancia de máquina clásica asociada.
all sc: Classical_Service | #sc.machines > 0
/*----------------------------------------------------------------------------------------------------------------------------*/

/*--------------------------------------------- Quantum-Restrictions-------------------------------------------------*/
// Un servicio cuántico, no puede estar alojado en una máquina clásica
all qs: Quantum_Service | #(qs.machines & CPU) = 0
// Un servicio cuántico, no puede estar alojado en más de una máquina cuántica
all qs: Quantum_Service | #qs.machines < 2
//Un servicio cuántico, tiene que tener una instancia de máquina cuántica asociada.
all qs: Quantum_Service | #qs.machines > 0
// Un servicio cuántico, no puede estar en un despliegue clásico
//all qs: Quantum_Service | #(qs.deployment & Classical_Deployment) = 0
// Toda máquina cuántica debe tener un servicio asociado
all qs: Quantum_Service, q: QPU | qs.machines = q implies qs in q.services
// Todo servicio cuántico debe tener un servicio clásico asociado
all qs: Quantum_Service | #(qs.hybrid_service) = 1  and #(qs.hybrid_service & Quantum_Service) = 0

/*-----------------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------Hybrid-Services-Restrictions----------------------------------------------------------*/
// Todo servicio cuántico tiene que estar asociado a un servicio clásico 
all qs: Quantum_Service | qs in Classical_Service.hybrid_service
// Para todos los servicios clásicos y cuánticos que conforman un servicio híbrido, deben pertenecer al mismo despliegue
all s1, s2: Service | s1 !=s2 and s1 in s2.hybrid_service and s2 in s1.hybrid_service implies s1.deployment = s2.deployment
// Un servicio cuántico no puede compartir el servicio clásico con el que está asociado
all qs1, qs2: Quantum_Service | qs1 != qs2 and #(qs1.hybrid_service) = 1 and #(qs2.hybrid_service) = 1 implies #(qs1.hybrid_service & qs2.hybrid_service) = 0
// El servicio cuántico y clásico que conformen un servicio híbrido, solo pueden estar relacionado entre ellos
all qs:Quantum_Service, cs: Classical_Service | (cs in qs.hybrid_service implies qs in cs.hybrid_service) and (qs in cs.hybrid_service implies cs in qs.hybrid_service)
// Dos servicios clásicos no pueden formar un servicio híbrido. Un servicio consigo mismo tampoco puede formar un servicio híbrido
all cs1, cs2: Classical_Service, hd: Hybrid_Deployment | (cs1 in hd.services and cs2 in hd.services) implies not (cs1 in cs2.hybrid_service) and not ( cs2 in cs2.hybrid_service)
/*--------------------------------------------------------------------------------------------------------------------------------*/

/*--------------------------------------------------Deployment-Restrictions-------------------------------------------------*/
// Todos los servicios deben de pertenecer a un despliegue (Se cumple con el one en Deployment)
all hd: Hybrid_Deployment | #(hd.services & Quantum_Service) > 0 and #(hd.services & Classical_Service) > 0
//all cd: Classical_Deployment | #(cd.services & Quantum_Service) = 0
/*---------------------------------------------------------------------------------------------------------------------------*/
 
/*--------------------------------------------------Use-Case----------------------------------------------------------------*/
// Los servicios de datos de sensores solo están conectados con el servicio agregador.
// El servicio agregador solo puede estar conectado al servicio híbrido Grover y a los servicios de Datos de Sensores.
// El servicio híbrido solo puede estar conectado con el agregador y servicio de procesamiento de resultado
/*---------------------------------------------------------------------------------------------------------------------------*/
}

pred show {
// Todo despliegue híbrido debe de contar con 6 servicios clásicos y 1 servicio cuántico
all d: Hybrid_Deployment | #(d.services & Classical_Service) = 6 and  #(d.services & Quantum_Service) = 1  
// Todo despliegue debe de estar compuesto por un procesamiento, un grover, un aggregador y 3 servicios de sensores (No se si es redundante con la de arriba)
//all d: Hybrid_Deployment |  #d.sensor_services = 3 and #d.grover = 1  and #d.processing_service = 1 and #d.aggregator = 1
}
run show for 25

label done [some UseCase:workflowDone=true]

property rangeR{performanceRew} [F done] totalPerformance;
property rangeR{costRew} [F done] as totalCost;
property SminR{performanceRew} [F done]
property SminR{costRew} [F done]


// Definition of instances (Generated in module)
one sig DS1 extends DataService {}
</
    formula performance = x;
    formula cost = y;
/>
one sig DS2 extends DataService {}
</
    formula performance = x;
    formula cost = y;
/>
one sig DS3 extends DataService {}
</
    formula performance = x;
    formula cost = y;
/>
one sig A1 extends Aggregator {}
</
    formula performance = x;
    formula cost = y;
/>
one sig CG1 extends ClassicalGrover {}
</
    formula performance = x;
    formula cost = y;
/>
one sig QG1  extends QuantumGrover{}
</
    formula performance = x;
    formula cost = y;
/>
one sig RP1 extends ResultProcessor {}
</
    formula performance = x;
    formula cost = y;
/>